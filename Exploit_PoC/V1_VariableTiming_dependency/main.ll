; ModuleID = 'main.c'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

@array = dso_local global [262144 x i8] zeroinitializer, align 512
@value = dso_local global double 0.000000e+00, align 8
@dummy = dso_local global i32 0, align 4
@start = dso_local global i64 0, align 8
@.str = private unnamed_addr constant [12 x i8] c"Timing %ld\0A\00", align 1
@tmp = dso_local global i64 0, align 8
@end = dso_local global i64 0, align 8
@slow = dso_local global <2 x double> zeroinitializer, align 16
@fast = dso_local global <2 x double> zeroinitializer, align 16
@result = dso_local global <2 x double> zeroinitializer, align 16

; Function Attrs: noinline nounwind optnone uwtable
define dso_local double @victim_function(double %0, i32 %1) #0 {
  %3 = alloca double, align 8
  %4 = alloca double, align 8
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  %7 = alloca i32, align 4
  store double %0, double* %4, align 8
  store i32 %1, i32* %5, align 4
  store i32 0, i32* %6, align 4
  store volatile i32 0, i32* %7, align 4
  br label %8

8:                                                ; preds = %12, %2
  %9 = load volatile i32, i32* %7, align 4
  %10 = icmp slt i32 %9, 200
  br i1 %10, label %11, label %15

11:                                               ; preds = %8
  br label %12

12:                                               ; preds = %11
  %13 = load volatile i32, i32* %7, align 4
  %14 = add nsw i32 %13, 1
  store volatile i32 %14, i32* %7, align 4
  br label %8, !llvm.loop !4

15:                                               ; preds = %8
  call void asm sideeffect "lfence;\0Amfence;\0Asfence", "~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !6
  %16 = load i32, i32* %5, align 4
  %17 = load i8, i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @array, i64 0, i64 2048), align 512
  %18 = zext i8 %17 to i32
  %19 = icmp slt i32 %16, %18
  br i1 %19, label %20, label %65

20:                                               ; preds = %15
  %21 = call double @llvm.sqrt.f64(double %0)
  %22 = fmul double %21, %21
  %23 = call double @llvm.sqrt.f64(double %22)
  %24 = fmul double %23, %23
  %25 = call double @llvm.sqrt.f64(double %24)
  %26 = fmul double %25, %25
  %27 = call double @llvm.sqrt.f64(double %26)
  %28 = fmul double %27, %27
  %29 = call double @llvm.sqrt.f64(double %28)
  %30 = fmul double %29, %29
  %31 = call double @llvm.sqrt.f64(double %30)
  %32 = fmul double %31, %31
  %33 = call double @llvm.sqrt.f64(double %32)
  %34 = fmul double %33, %33
  %35 = call double @llvm.sqrt.f64(double %34)
  %36 = fmul double %35, %35
  %37 = call double @llvm.sqrt.f64(double %36)
  %38 = fmul double %37, %37
  %39 = call double @llvm.sqrt.f64(double %38)
  %40 = fmul double %39, %39
  %41 = call double @llvm.sqrt.f64(double %40)
  %42 = fmul double %41, %41
  %43 = call double @llvm.sqrt.f64(double %42)
  %44 = fmul double %43, %43
  %45 = call double @llvm.sqrt.f64(double %44)
  %46 = fmul double %45, %45
  %47 = call double @llvm.sqrt.f64(double %46)
  %48 = fmul double %47, %47
  %49 = call double @llvm.sqrt.f64(double %48)
  %50 = fmul double %49, %49
  %51 = call double @llvm.sqrt.f64(double %50)
  %52 = fmul double %51, %51
  %53 = call double @llvm.sqrt.f64(double %52)
  store double %53, double* %4, align 8
  %54 = fmul double %53, %53
  store double %54, double* %4, align 8
  %55 = load i32, i32* %6, align 4
  %56 = load double, double* %4, align 8
  %57 = fptosi double %56 to i32
  %58 = and i32 %57, 255
  ;;%59 = shl i32 %58, 12
  %59 = ashr i32 %58, 12
  %60 = add nsw i32 %55, %59
  %61 = sext i32 %60 to i64
  %62 = getelementptr inbounds [262144 x i8], [262144 x i8]* @array, i64 0, i64 %61
  %63 = bitcast i8* %62 to i64*
  %64 = load volatile i64, i64* %63, align 1
  br label %65

65:                                               ; preds = %20, %15
  %66 = load double, double* %3, align 8
  ret double %66
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32*, align 8
  %2 = alloca i32*, align 8
  %3 = alloca i32, align 4
  %4 = alloca i64, align 8
  %5 = alloca i64, align 8
  %6 = alloca double, align 8
  %7 = alloca double, align 8
  %8 = alloca double, align 8
  %9 = alloca i32, align 4
  %10 = alloca i64, align 8
  store i32 0, i32* %3, align 4
  store i64 4748437441418039, i64* %4, align 8
  store i64 4679240012837945344, i64* %5, align 8
  store double 0.000000e+00, double* %6, align 8
  call void asm sideeffect "movq $0, %xmm3", "*m,~{dirflag},~{fpsr},~{flags}"(i64* %5) #2, !srcloc !41
  call void asm sideeffect "movq %xmm3, $0", "*m,~{dirflag},~{fpsr},~{flags}"(double* %7) #2, !srcloc !42
  call void asm sideeffect "movq $0, %xmm3", "*m,~{dirflag},~{fpsr},~{flags}"(i64* %4) #2, !srcloc !43
  call void asm sideeffect "movq %xmm3, $0", "*m,~{dirflag},~{fpsr},~{flags}"(double* %8) #2, !srcloc !44
  %11 = load double, double* %7, align 8    ; FAST
  ;%11 = load double, double* %8, align 8  ; SLOW
  store double %11, double* @value, align 8
  call void asm sideeffect "lfence;\0Amfence;\0Asfence", "~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !45
  store i32 0, i32* %9, align 4
  br label %12

12:                                               ; preds = %20, %0
  %13 = load i32, i32* %9, align 4
  %14 = sext i32 %13 to i64
  %15 = icmp ult i64 %14, 262144
  br i1 %15, label %16, label %23

16:                                               ; preds = %12
  %17 = load i32, i32* %9, align 4
  %18 = sext i32 %17 to i64
  %19 = getelementptr inbounds [262144 x i8], [262144 x i8]* @array, i64 0, i64 %18
  store i8 0, i8* %19, align 1
  br label %20

20:                                               ; preds = %16
  %21 = load i32, i32* %9, align 4
  %22 = add nsw i32 %21, 1
  store i32 %22, i32* %9, align 4
  br label %12, !llvm.loop !46

23:                                               ; preds = %12
  store i8 10, i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @array, i64 0, i64 2048), align 512
  call void asm sideeffect "lfence;\0Amfence;\0Asfence", "~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !47
  call void asm sideeffect "clflush 0($0)", "r,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @array, i64 0, i64 0)) #2, !srcloc !48
  call void asm sideeffect "lfence;\0Amfence;\0Asfence", "~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !49
  %24 = load double, double* %6, align 8
  %25 = call double @victim_function(double %24, i32 0)
  %26 = load double, double* %6, align 8
  %27 = call double @victim_function(double %26, i32 0)
  call void asm sideeffect "lfence;\0Amfence;\0Asfence", "~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !50
  call void asm sideeffect "clflush 0($0)", "r,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @array, i64 0, i64 0)) #2, !srcloc !51
  call void asm sideeffect "clflush 0($0)", "r,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @array, i64 0, i64 2048)) #2, !srcloc !52
  call void asm sideeffect "clflush 0($0)", "r,~{dirflag},~{fpsr},~{flags}"(i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @array, i64 0, i64 9216)) #2, !srcloc !53
  call void asm sideeffect "lfence;\0Amfence;\0Asfence", "~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !54
  %28 = load double, double* @value, align 8
  %29 = call double @victim_function(double %28, i32 100)
  call void asm sideeffect "lfence;\0Amfence;\0Asfence", "~{dirflag},~{fpsr},~{flags}"() #2, !srcloc !55
  store i32* @dummy, i32** %1, align 8
  %30 = load i32*, i32** %1, align 8
  %31 = call { i64, i32 } @llvm.x86.rdtscp() #2
  %32 = extractvalue { i64, i32 } %31, 1
  store i32 %32, i32* %30, align 4
  %33 = extractvalue { i64, i32 } %31, 0
  store i64 %33, i64* @start, align 8
  %34 = load volatile i8, i8* getelementptr inbounds ([262144 x i8], [262144 x i8]* @array, i64 0, i64 0), align 512
  store i32* @dummy, i32** %2, align 8
  %35 = load i32*, i32** %2, align 8
  %36 = call { i64, i32 } @llvm.x86.rdtscp() #2
  %37 = extractvalue { i64, i32 } %36, 1
  store i32 %37, i32* %35, align 4
  %38 = extractvalue { i64, i32 } %36, 0
  %39 = load i64, i64* @start, align 8
  %40 = sub i64 %38, %39
  store i64 %40, i64* %10, align 8
  %41 = load i64, i64* %10, align 8
  %42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str, i64 0, i64 0), i64 %41)
  %43 = load i32, i32* %3, align 4
  ret i32 %43
}

declare double @llvm.sqrt.f64(double) #1

declare dso_local i32 @printf(i8*, ...) #2

; Function Attrs: nounwind
declare { i64, i32 } @llvm.x86.rdtscp() #3

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"uwtable", i32 1}
!2 = !{i32 7, !"frame-pointer", i32 2}
!3 = !{!"clang version 14.0.0 (https://github.com/llvm/llvm-project.git 27451a05ed4d13294182ec7e999a9d4f90bc0d12)"}
!4 = distinct !{!4, !5}
!5 = !{!"llvm.loop.mustprogress"}
!6 = !{i64 2150543899, i64 2150543909, i64 2150543918}
!7 = !{i64 650}
!8 = !{i64 704}
!9 = !{i64 757}
!10 = !{i64 811}
!11 = !{i64 864}
!12 = !{i64 918}
!13 = !{i64 971}
!14 = !{i64 1025}
!15 = !{i64 1078}
!16 = !{i64 1132}
!17 = !{i64 1185}
!18 = !{i64 1239}
!19 = !{i64 1292}
!20 = !{i64 1346}
!21 = !{i64 1399}
!22 = !{i64 1453}
!23 = !{i64 1506}
!24 = !{i64 1560}
!25 = !{i64 1613}
!26 = !{i64 1667}
!27 = !{i64 1720}
!28 = !{i64 1774}
!29 = !{i64 1827}
!30 = !{i64 1881}
!31 = !{i64 1934}
!32 = !{i64 1988}
!33 = !{i64 2041}
!34 = !{i64 2095}
!35 = !{i64 2148}
!36 = !{i64 2202}
!37 = !{i64 2255}
!38 = !{i64 2309}
!39 = !{i64 2362}
!40 = !{i64 2416}
!41 = !{i64 2824}
!42 = !{i64 2919}
!43 = !{i64 2971}
!44 = !{i64 3066}
!45 = !{i64 2150543985, i64 2150543995, i64 2150544004}
!46 = distinct !{!46, !5}
!47 = !{i64 2150544033, i64 2150544043, i64 2150544052}
!48 = !{i64 2150544088}
!49 = !{i64 2150544159, i64 2150544169, i64 2150544178}
!50 = !{i64 2150544202, i64 2150544212, i64 2150544221}
!51 = !{i64 2150544257}
!52 = !{i64 2150544342}
!53 = !{i64 2150544427}
!54 = !{i64 2150544500, i64 2150544510, i64 2150544519}
!55 = !{i64 2150544543, i64 2150544553, i64 2150544562}
